name: build-ublue-custom
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  MY_IMAGE_NAME: "feshiping"  # Ensure this is the intended image name
  MY_IMAGE_DESC: "Install"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  VERSION: "v1.0.0 again 2 "
  # This will auto-populate based on the repository owner

jobs:
  build_push:
    permissions:
      contents: write
      packages: write
      id-token: write
      # Add specific permission for releases
      issues: write
      pull-requests: write
      actions: read
      discussions: write
      deployments: write
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert image name to lowercase
        run: echo "MY_IMAGE_NAME_LOWER=$(echo ${{ env.MY_IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: ./Containerfile
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}/${{ env.MY_IMAGE_NAME_LOWER }}:latest
          platforms: linux/amd64,linux/arm64
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ github.ref_name }}
          body: "Description of the release"
          draft: false
          prerelease: false
      - name: Save Docker image to tar file
        run: |
          docker save ${{ env.IMAGE_REGISTRY }}/${{ env.MY_IMAGE_NAME_LOWER }}:latest | xz -z - > my-image-${{ github.run_id }}.tar.xz
        
  